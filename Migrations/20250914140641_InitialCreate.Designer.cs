// <auto-generated />
using System;
using HospitalDeVehiculosUltimaVersion.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalDeVehiculosUltimaVersion.Migrations
{
    [DbContext(typeof(HospitalDeVehiculosContext))]
    [Migration("20250914140641_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeProgramacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("AdministradorDeProgramacion");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeRepuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("AdministradorDeRepuestos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cargo");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion");

                    b.Property<decimal>("SalarioBasico")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("salarioBasico");

                    b.HasKey("Id");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.InventarioDeRepuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdAdminRepuestos")
                        .HasColumnType("int")
                        .HasColumnName("idAdminRepuestos");

                    b.Property<DateTime>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("IdAdminRepuestos");

                    b.ToTable("InventarioDeRepuestos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Mantenimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("estado")
                        .HasComment("Cancelado =0,\r\nProgramado = 1\r\nEn Progreso =2,\r\nCompletado = 3,");

                    b.Property<DateTime?>("FechaEjecucion")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaEjecucion");

                    b.Property<DateTime>("FechaProgramada")
                        .HasColumnType("datetime")
                        .HasColumnName("fechaProgramada");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdAdminMantenimiento")
                        .HasColumnType("int")
                        .HasColumnName("idAdminMantenimiento");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int")
                        .HasColumnName("idVehiculo");

                    b.Property<DateTime>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("IdAdminMantenimiento");

                    b.HasIndex("IdVehiculo");

                    b.ToTable("Mantenimiento");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.MantenimientoPago", b =>
                {
                    b.Property<int?>("IdMantenimiento")
                        .HasColumnType("int")
                        .HasColumnName("idMantenimiento");

                    b.Property<int?>("IdPago")
                        .HasColumnType("int")
                        .HasColumnName("idPago");

                    b.HasIndex("IdMantenimiento");

                    b.HasIndex("IdPago");

                    b.ToTable("MantenimientoPago");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Descuento")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("descuento");

                    b.Property<string>("Divisa")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("divisa")
                        .IsFixedLength();

                    b.Property<byte>("Estado")
                        .HasColumnType("tinyint")
                        .HasColumnName("estado")
                        .HasComment("0 = Pendiente,\r\n1 = Pagado,\r\n2 = Anulado,\r\n3 = Reembolsado");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("total");

                    b.Property<DateTime>("UltimaActualizacion")
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.ToTable("Pago");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("EstadoDeUso")
                        .HasColumnType("tinyint")
                        .HasColumnName("estadoDeUso")
                        .HasComment("Nuevo = 1,\r\nUsado = 0,\r\n");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdInventario")
                        .HasColumnType("int")
                        .HasColumnName("idInventario");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("precio");

                    b.Property<int>("StockActual")
                        .HasColumnType("int")
                        .HasColumnName("stockActual");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int")
                        .HasColumnName("stockMinimo");

                    b.Property<DateTime>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("IdInventario");

                    b.ToTable("Repuestos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.Property<byte>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("estado")
                        .HasComment("Cancelado = 0,\r\nEn Espera = 1,\r\nEn progreso = 2,\r\nFinalizado = 3");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdMantenimiento")
                        .HasColumnType("int")
                        .HasColumnName("idMantenimiento");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("lastUpdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("precio");

                    b.HasKey("Id");

                    b.HasIndex("IdMantenimiento");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ci")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ci");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("contrasenia");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("email");

                    b.Property<byte>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("estado")
                        .HasComment("Inactivo = 0,\r\nActivo = 1,");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NumeroContacto")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("numeroContacto");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("primerApellido");

                    b.Property<string>("PrimerNombre")
                        .IsRequired()
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("primerNombre");

                    b.Property<string>("SegundoApellido")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("segundoApellido");

                    b.Property<string>("SegundoNombre")
                        .HasMaxLength(90)
                        .IsUnicode(false)
                        .HasColumnType("varchar(90)")
                        .HasColumnName("segundoNombre");

                    b.Property<DateTime>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadMotor")
                        .HasColumnType("int")
                        .HasColumnName("capacidadMotor");

                    b.Property<byte>("Combustible")
                        .HasColumnType("tinyint")
                        .HasColumnName("combustible")
                        .HasComment("Gasolina = 0,\r\nDiesel = 1,\r\nHibrido = 2,\r\nElectrico = 3");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fechaRegistro")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<int>("Kilometraje")
                        .HasColumnType("int")
                        .HasColumnName("kilometraje");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("marca");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("modelo");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("placa");

                    b.Property<byte>("Transmision")
                        .HasColumnType("tinyint")
                        .HasColumnName("transmision")
                        .HasComment("Manual = 0, \r\nAutomática = 1, \r\nCVT = 2");

                    b.Property<DateTime>("UltimaActualizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ultimaActualizacion")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeProgramacion", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Empleado", "IdNavigation")
                        .WithOne("AdministradorDeProgramacion")
                        .HasForeignKey("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeProgramacion", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_AdministradorDeProgramacion_Empleado");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeRepuesto", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Empleado", "IdNavigation")
                        .WithOne("AdministradorDeRepuesto")
                        .HasForeignKey("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeRepuesto", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_AdministradorDeRepuestos_Empleado");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Cliente", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Usuario", "IdNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("HospitalDeVehiculosUltimaVersion.Model.Cliente", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Usuario");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Empleado", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Usuario", "IdNavigation")
                        .WithOne("Empleado")
                        .HasForeignKey("HospitalDeVehiculosUltimaVersion.Model.Empleado", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Empleado_Usuario");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.InventarioDeRepuesto", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeRepuesto", "IdAdminRepuestosNavigation")
                        .WithMany("InventarioDeRepuestos")
                        .HasForeignKey("IdAdminRepuestos")
                        .IsRequired()
                        .HasConstraintName("FK_InventarioDeRepuestos_AdministradorDeRepuestos");

                    b.Navigation("IdAdminRepuestosNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Mantenimiento", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeProgramacion", "IdAdminMantenimientoNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdAdminMantenimiento")
                        .IsRequired()
                        .HasConstraintName("FK_Mantenimiento_AdministradorDeProgramacion");

                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Vehiculo", "IdVehiculoNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdVehiculo")
                        .IsRequired()
                        .HasConstraintName("FK_Mantenimiento_Vehiculo");

                    b.Navigation("IdAdminMantenimientoNavigation");

                    b.Navigation("IdVehiculoNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.MantenimientoPago", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Mantenimiento", "IdMantenimientoNavigation")
                        .WithMany()
                        .HasForeignKey("IdMantenimiento")
                        .HasConstraintName("FK_MantenimientoPago_Mantenimiento");

                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Pago", "IdPagoNavigation")
                        .WithMany()
                        .HasForeignKey("IdPago")
                        .HasConstraintName("FK_MantenimientoPago_Pago");

                    b.Navigation("IdMantenimientoNavigation");

                    b.Navigation("IdPagoNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Pago", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Cliente", "IdClienteNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Pago_Cliente");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Repuesto", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.InventarioDeRepuesto", "IdInventarioNavigation")
                        .WithMany("Repuestos")
                        .HasForeignKey("IdInventario")
                        .IsRequired()
                        .HasConstraintName("FK_Repuestos_InventarioDeRepuestos");

                    b.Navigation("IdInventarioNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Servicio", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Mantenimiento", "IdMantenimientoNavigation")
                        .WithMany("Servicios")
                        .HasForeignKey("IdMantenimiento")
                        .IsRequired()
                        .HasConstraintName("FK_Servicio_Mantenimiento");

                    b.Navigation("IdMantenimientoNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Vehiculo", b =>
                {
                    b.HasOne("HospitalDeVehiculosUltimaVersion.Model.Cliente", "IdClienteNavigation")
                        .WithMany("Vehiculos")
                        .HasForeignKey("IdCliente")
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculo_Cliente");

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeProgramacion", b =>
                {
                    b.Navigation("Mantenimientos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.AdministradorDeRepuesto", b =>
                {
                    b.Navigation("InventarioDeRepuestos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Cliente", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Empleado", b =>
                {
                    b.Navigation("AdministradorDeProgramacion");

                    b.Navigation("AdministradorDeRepuesto");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.InventarioDeRepuesto", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Mantenimiento", b =>
                {
                    b.Navigation("Servicios");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Usuario", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("HospitalDeVehiculosUltimaVersion.Model.Vehiculo", b =>
                {
                    b.Navigation("Mantenimientos");
                });
#pragma warning restore 612, 618
        }
    }
}
